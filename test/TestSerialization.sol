pragma solidity ^0.4.24;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/Core/ZB/ZBGameMode.sol";
import "../contracts/Core/ZBGameModeSerialization.sol";
import "../contracts/3rdParty/Seriality/BytesToTypes.sol";
import "../contracts/3rdParty/Seriality/SizeOf.sol";
import "../contracts/3rdParty/Seriality/TypesToBytes.sol";

contract TestSerialization {
    using ZBGameModeSerialization for ZBGameModeSerialization.SerializedGameStateChanges;
    using ZBGameModeSerialization for ZBGameMode.GameState;

    function testDeserializeInts() public {
        bytes memory buffer = hex'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000003000201';
        uint offset = buffer.length;
        Assert.equal(int(BytesToTypes.bytesToInt8(offset, buffer)), int(1), "");
        offset -= SizeOf.sizeOfInt(8);
        Assert.equal(int(BytesToTypes.bytesToInt16(offset, buffer)), int(2), "");
        offset -= SizeOf.sizeOfInt(16);
        Assert.equal(int(BytesToTypes.bytesToInt32(offset, buffer)), int(3), "");
        offset -= SizeOf.sizeOfInt(32);
        Assert.equal(int(BytesToTypes.bytesToInt64(offset, buffer)), int(4), "");
        offset -= SizeOf.sizeOfInt(64);
    }

    function testDeserializeStrings() public {
        bytes memory buffer = hex'436f6f6c20427574746f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b';
        uint offset = buffer.length;
        uint size = BytesToTypes.getStringSize(offset, buffer);
        string memory str = new string(size);
        BytesToTypes.bytesToString(offset, buffer, bytes(str));
        Assert.equal(str, "Cool Button", "");

        buffer = hex'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f6c20427574746f6e20300000000000000000000000000000000000000000003720436f6f6c20427574746f6e203820436f6f6c20427574746f6e203920436f746f6e203520436f6f6c20427574746f6e203620436f6f6c20427574746f6e2020427574746f6e203320436f6f6c20427574746f6e203420436f6f6c20427574436f6f6c20427574746f6e203120436f6f6c20427574746f6e203220436f6f6c000000000000000000000000000000000000000000000000000000000000008b';
        offset = buffer.length;
        size = BytesToTypes.getStringSize(offset, buffer);
        str = new string(size);
        BytesToTypes.bytesToString(offset, buffer, bytes(str));
        Assert.equal(str, "Cool Button 1 Cool Button 2 Cool Button 3 Cool Button 4 Cool Button 5 Cool Button 6 Cool Button 7 Cool Button 8 Cool Button 9 Cool Button 0", "");
    }

    function testDeserializeGameState() public {
        bytes memory buffer = hex'00000000000000024765797a6572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000004467265657a7a6565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000044a65747465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000044f7a6d6f7a697a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000045a6e6f776d616e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000000000004497a7a65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000443657262657275730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000447617267616e7475610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000908000000000000000244656661756c74320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000200001400000000000000025a68616d70696f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000004466972652d4d6177000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000044d6f646f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000004576572657a6f6d620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000443796e6465726d616e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000442757272726e6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000045175617a69000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000045079726f6d617a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000708000000000000000144656661756c743100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000001000014000000000000000005';
        ZBGameMode.GameState memory gameState;
        gameState.initWithSerializedData(buffer);

        Assert.equal(gameState.id, int64(5), "");
        Assert.equal(int(gameState.currentPlayerIndex), uint8(0), "");

        Assert.equal(int(gameState.playerStates[0].defense), int(20), "");
        Assert.equal(int(gameState.playerStates[0].currentGoo), int(0), "");
        Assert.equal(int(gameState.playerStates[0].gooVials), int(0), "");
        Assert.equal(int(gameState.playerStates[0].deck.id), int(1), "");
        Assert.equal(int(gameState.playerStates[0].deck.heroId), int(1), "");
        Assert.equal(gameState.playerStates[0].deck.name, "Default1", "");
        Assert.equal(gameState.playerStates[0].deck.cards[0].name, "Pyromaz", "");
        Assert.equal(int(gameState.playerStates[0].deck.cards[0].amount), int(4), "");
        Assert.equal(gameState.playerStates[0].deck.cards[7].name, "Zhampion", "");
        Assert.equal(int(gameState.playerStates[0].deck.cards[7].amount), int(2), "");

        Assert.equal(int(gameState.playerStates[1].defense), int(20), "");
        Assert.equal(int(gameState.playerStates[1].currentGoo), int(0), "");
        Assert.equal(int(gameState.playerStates[1].gooVials), int(0), "");
        Assert.equal(int(gameState.playerStates[1].deck.id), int(2), "");
        Assert.equal(int(gameState.playerStates[1].deck.heroId), int(2), "");
        Assert.equal(gameState.playerStates[1].deck.name, "Default2", "");
        Assert.equal(gameState.playerStates[1].deck.cards[0].name, "Gargantua", "");
        Assert.equal(int(gameState.playerStates[1].deck.cards[0].amount), int(4), "");
        Assert.equal(gameState.playerStates[1].deck.cards[7].name, "Geyzer", "");
        Assert.equal(int(gameState.playerStates[1].deck.cards[7].amount), int(2), "");
    }
}